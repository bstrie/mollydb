policy_module(semdb-regtest, 1.08)

gen_require(`
	all_userspace_class_perms
')

## <desc>
## <p>
## Allow to launch regression test of SE-MollyDB
## Don't switch to TRUE in normal cases
## </p>
## </desc>
gen_tunable(semdb_regression_test_mode, false)

#
# Type definitions for regression test
#
type semdb_regtest_trusted_proc_exec_t;
mollydb_procedure_object(semdb_regtest_trusted_proc_exec_t)
type semdb_nosuch_trusted_proc_exec_t;
mollydb_procedure_object(semdb_nosuch_trusted_proc_exec_t)

type semdb_regtest_invisible_schema_t;
mollydb_schema_object(semdb_regtest_invisible_schema_t);

#
# Test domains for self defined unconfined / superuser
#
role semdb_regtest_superuser_r;
userdom_base_user_template(semdb_regtest_superuser)
userdom_manage_home_role(semdb_regtest_superuser_r, semdb_regtest_superuser_t)
userdom_exec_user_home_content_files(semdb_regtest_superuser_t)
userdom_write_user_tmp_sockets(semdb_regtest_superuser_t)
optional_policy(`
	mollydb_stream_connect(semdb_regtest_superuser_t)
	mollydb_unconfined(semdb_regtest_superuser_t)
')
optional_policy(`
	unconfined_stream_connect(semdb_regtest_superuser_t)
	unconfined_rw_pipes(semdb_regtest_superuser_t)
')
optional_policy(`
	gen_require(`
		attribute semdb_client_type;
	')
	allow semdb_regtest_superuser_t self : process { setcurrent };
	allow semdb_regtest_superuser_t { self semdb_client_type } : process { dyntransition };
')

# Type transition rules
allow semdb_regtest_user_t semdb_regtest_dba_t : process { transition };
type_transition semdb_regtest_user_t semdb_regtest_trusted_proc_exec_t:process semdb_regtest_dba_t;
type_transition semdb_regtest_user_t semdb_nosuch_trusted_proc_exec_t:process semdb_regtest_nosuch_t;

#
# Test domains for database administrators
#
role semdb_regtest_dba_r;
userdom_base_user_template(semdb_regtest_dba)
userdom_manage_home_role(semdb_regtest_dba_r, semdb_regtest_dba_t)
userdom_exec_user_home_content_files(semdb_regtest_dba_t)
userdom_write_user_tmp_sockets(semdb_regtest_user_t)
optional_policy(`
	mollydb_admin(semdb_regtest_dba_t, semdb_regtest_dba_r)
	mollydb_stream_connect(semdb_regtest_dba_t)
')
optional_policy(`
	unconfined_stream_connect(semdb_regtest_dba_t)
	unconfined_rw_pipes(semdb_regtest_dba_t)
')

# Type transition rules
allow semdb_regtest_dba_t self : process { setcurrent };
allow semdb_regtest_dba_t semdb_regtest_user_t : process { dyntransition };
allow semdb_regtest_dba_t semdb_regtest_foo_t : process { dyntransition };
allow semdb_regtest_dba_t semdb_regtest_var_t : process { dyntransition };

# special rule for system columns
optional_policy(`
	gen_require(`
		attribute	semdb_table_type;
		type		semdb_sysobj_t;
	')
	type_transition semdb_regtest_dba_t semdb_table_type:db_column semdb_sysobj_t "ctid";
	type_transition semdb_regtest_dba_t semdb_table_type:db_column semdb_sysobj_t "oid";
	type_transition semdb_regtest_dba_t semdb_table_type:db_column semdb_sysobj_t "xmin";
	type_transition semdb_regtest_dba_t semdb_table_type:db_column semdb_sysobj_t "xmax";
	type_transition semdb_regtest_dba_t semdb_table_type:db_column semdb_sysobj_t "cmin";
	type_transition semdb_regtest_dba_t semdb_table_type:db_column semdb_sysobj_t "cmax";
	type_transition semdb_regtest_dba_t semdb_table_type:db_column semdb_sysobj_t "tableoid";
')

#
# Dummy domain for unpriv users
#
role semdb_regtest_user_r;
userdom_base_user_template(semdb_regtest_user)
userdom_manage_home_role(semdb_regtest_user_r, semdb_regtest_user_t)
userdom_exec_user_home_content_files(semdb_regtest_user_t)
userdom_write_user_tmp_sockets(semdb_regtest_user_t)
optional_policy(`
	mollydb_role(semdb_regtest_user_r, semdb_regtest_user_t)
	mollydb_stream_connect(semdb_regtest_user_t)
')
optional_policy(`
	unconfined_stream_connect(semdb_regtest_user_t)
	unconfined_rw_pipes(semdb_regtest_user_t)
')
# Type transition rules
allow semdb_regtest_user_t semdb_regtest_dba_t : process { transition };
type_transition semdb_regtest_user_t semdb_regtest_trusted_proc_exec_t:process semdb_regtest_dba_t;
type_transition semdb_regtest_user_t semdb_nosuch_trusted_proc_exec_t:process semdb_regtest_nosuch_t;

#
# Dummy domain for (virtual) connection pooler software
#
# XXX - this test scenario assumes semdb_regtest_pool_t domain performs
# as a typical connection pool server; that switches the client label of
# this session prior to any user queries. The semdb_regtest_(foo|var)_t
# is allowed to access its own table types, but not allowed to reference
# other's one.
#
role semdb_regtest_pool_r;
userdom_base_user_template(semdb_regtest_pool)
userdom_manage_home_role(semdb_regtest_pool_r, semdb_regtest_pool_t)
userdom_exec_user_home_content_files(semdb_regtest_pool_t)
userdom_write_user_tmp_sockets(semdb_regtest_pool_t)

type semdb_regtest_foo_t;
type semdb_regtest_var_t;
type semdb_regtest_foo_table_t;
type semdb_regtest_var_table_t;

allow semdb_regtest_foo_t semdb_regtest_foo_table_t:db_table { getattr select update insert delete lock };
allow semdb_regtest_foo_t semdb_regtest_foo_table_t:db_column { getattr select update insert };
allow semdb_regtest_foo_t semdb_regtest_foo_table_t:db_tuple { select update insert delete };

allow semdb_regtest_var_t semdb_regtest_var_table_t:db_table { getattr select update insert delete lock };
allow semdb_regtest_var_t semdb_regtest_var_table_t:db_column { getattr select update insert };
allow semdb_regtest_var_t semdb_regtest_var_table_t:db_tuple { select update insert delete };

optional_policy(`
	gen_require(`
		role unconfined_r;
	')
	mollydb_role(unconfined_r, semdb_regtest_foo_t)
	mollydb_role(unconfined_r, semdb_regtest_var_t)
	mollydb_table_object(semdb_regtest_foo_table_t)
	mollydb_table_object(semdb_regtest_var_table_t)
')
optional_policy(`
	mollydb_stream_connect(semdb_regtest_pool_t)
	mollydb_role(semdb_regtest_pool_r, semdb_regtest_pool_t)
')
optional_policy(`
	unconfined_stream_connect(semdb_regtest_pool_t)
	unconfined_rw_pipes(semdb_regtest_pool_t)
')
# type transitions
allow semdb_regtest_pool_t self:process { setcurrent };
allow semdb_regtest_pool_t semdb_regtest_dba_t:process { transition };
type_transition semdb_regtest_pool_t semdb_regtest_trusted_proc_exec_t:process semdb_regtest_dba_t;

allow { semdb_regtest_foo_t semdb_regtest_var_t } self:process { setcurrent };
allow { semdb_regtest_foo_t semdb_regtest_var_t } semdb_regtest_pool_t:process { dyntransition };

#
# Dummy domain for non-exist users
#
role semdb_regtest_nosuch_r;
userdom_base_user_template(semdb_regtest_nosuch)
optional_policy(`
    mollydb_role(semdb_regtest_nosuch_r, semdb_regtest_nosuch_t)
')

#
# Rules to launch psql in the dummy domains
#
optional_policy(`
	gen_require(`
		role unconfined_r;
		type unconfined_t;
		type semdb_trusted_proc_t;
	')
	tunable_policy(`semdb_regression_test_mode',`
		allow unconfined_t self : process { setcurrent dyntransition };
		allow unconfined_t semdb_regtest_dba_t : process { transition dyntransition };
		allow unconfined_t semdb_regtest_superuser_t : process { transition dyntransition };
		allow unconfined_t semdb_regtest_user_t : process { transition dyntransition };
		allow unconfined_t semdb_regtest_pool_t : process { transition dyntransition };
	')
	role unconfined_r types semdb_regtest_dba_t;
	role unconfined_r types semdb_regtest_superuser_t;
	role unconfined_r types semdb_regtest_user_t;
	role unconfined_r types semdb_regtest_nosuch_t;
	role unconfined_r types semdb_trusted_proc_t;

	role unconfined_r types semdb_regtest_pool_t;
	role unconfined_r types semdb_regtest_foo_t;
	role unconfined_r types semdb_regtest_var_t;
')

#
# Rule to make MCS policy work on regression test
#
# NOTE: MCS (multi category security) policy was enabled by default, to
# allow DAC style access control, in the previous selinux policy.
# However, its definition was changed later, then a limited number of
# applications are restricted by MCS policy, for container features
# mainly. The rules below enables MCS policy for domains of regression
# test also, even if base security policy does not apply. If base policy
# is old and MCS is enabled in default, rules below does nothing.
#
optional_policy(`
	gen_require(`
		type semdb_trusted_proc_t;
	')
	mcs_constrained(semdb_regtest_dba_t)
	mcs_constrained(semdb_regtest_superuser_t)
	mcs_constrained(semdb_regtest_user_t)
	mcs_constrained(semdb_regtest_nosuch_t)
	mcs_constrained(semdb_trusted_proc_t)

	mcs_constrained(semdb_regtest_pool_t)
	mcs_constrained(semdb_regtest_foo_t)
	mcs_constrained(semdb_regtest_var_t)
')

#
# Rule to execute original trusted procedures
#
# These rules intends to allow any valid client types to launch trusted-
# procedures (including ones causes domain transition to invalid domain)
# being labeled as semdb_regtest_trusted_proc_exec_t and
# semdb_nosuch_trusted_proc_exec_t.
#
optional_policy(`
	gen_require(`
		attribute semdb_client_type;
	')
	allow semdb_client_type { semdb_regtest_trusted_proc_exec_t semdb_nosuch_trusted_proc_exec_t }:db_procedure { getattr execute entrypoint };
')
